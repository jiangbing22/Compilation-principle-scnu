int -> int
ID -> main
Lparen -> (
Rparen -> )
Lbrace -> {
int -> int
ID -> a
branch -> ;
float -> float
ID -> b
Lbracket -> [
NUM -> 10
Rbracket -> ]
branch -> ;
double -> double
ID -> c
branch -> ;
void -> void
ID -> exampleFunction
Lparen -> (
int -> int
ID -> x
comon -> ,
float -> float
ID -> y
Rparen -> )
Lbrace -> {
if -> if
Lparen -> (
ID -> x
gt -> >
NUM -> 0
Rparen -> )
Lbrace -> {
ID -> a
assignop -> =
ID -> x
add -> +
NUM -> 5
branch -> ;
Rbrace -> }
else -> else
Lbrace -> {
ID -> a
assignop -> =
ID -> x
minus -> -
NUM -> 5
branch -> ;
Rbrace -> }
do -> do
Lbrace -> {
ID -> b
Lbracket -> [
NUM -> 0
Rbracket -> ]
assignop -> =
ID -> b
Lbracket -> [
NUM -> 0
Rbracket -> ]
add -> +
NUM -> 1.0
branch -> ;
Rbrace -> }
while -> while
Lparen -> (
ID -> b
Lbracket -> [
NUM -> 0
Rbracket -> ]
lt -> <
NUM -> 10.0
Rparen -> )
branch -> ;
return -> return
branch -> ;
Rbrace -> }
ID -> exampleFunction
Lparen -> (
NUM -> 5
comon -> ,
NUM -> 3.14
Rparen -> )
branch -> ;
return -> return
NUM -> 0
branch -> ;
Rbrace -> }

program->definition-list
definition-list->definition-list definition|definition
definition->variable-definition|function-definition
variable-definition->type-indicator ID;|type-indicator ID[NUM];
type-indicator->int|float|double|void
function-definition->type-indicator ID(parameters)compound-stmt
parameters->parameter-list|void
parameter-list->parameter-list,parameter|parameter
parameter->type-indicator ID|type-indicator ID[]
compound-stmt->{local-definitions statement-list}
local-definitions->local-definitions variable-definition|empty
statement-list->statement-list statement|empty
statement->expression-stmt|compound-stmt|condition-stmt|dowhile-stmt|return-stmt
expression-stmt->expression;|;
condition-stmt->if(expression)statement|if(expression)statement else statement
dowhile-stmt->do statement while(expression);
return-stmt->return;|return expression;
expression->variable = expression|simple-expression
variable->ID|ID[expression]
simple-expression->additive-expression relop additive-expression|additive-expression
relop-><=|<|>|>=|==|!=
additive-expression->additive-expression addop term|term
addop->+|-
term->term mulop factor|factor
mulop->*|/|%
factor->(expression)|variable|call|NUM
call->ID(arguments)
arguments->argument-list|empty
argument-list->argument-list,expression|expression